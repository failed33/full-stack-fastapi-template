// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  FilesStartFileProcessingData,
  FilesStartFileProcessingResponse,
  FilesGetFileProcessesData,
  FilesGetFileProcessesResponse,
  FilesGetFileProcessData,
  FilesGetFileProcessResponse,
  FilesGetProcessSegmentsData,
  FilesGetProcessSegmentsResponse,
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  SseSseUpdatesEndpointData,
  SseSseUpdatesEndpointResponse,
  UploadsCreatePresignedUploadUrlData,
  UploadsCreatePresignedUploadUrlResponse,
  UploadsInitiateMultipartUploadEndpointData,
  UploadsInitiateMultipartUploadEndpointResponse,
  UploadsGetMultipartPartUrlData,
  UploadsGetMultipartPartUrlResponse,
  UploadsCompleteMultipartUploadEndpointData,
  UploadsCompleteMultipartUploadEndpointResponse,
  UploadsAbortMultipartUploadEndpointData,
  UploadsAbortMultipartUploadEndpointResponse,
  UploadsDebugUploadConfigurationResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsHealthCheckResponse,
  UtilsGetSseUrlResponse,
} from "./types.gen"

export class FilesService {
  /**
   * Start File Processing
   * Starts a new processing task for a given file.
   *
   * Args:
   * session: Database session dependency
   * current_user: Authenticated user from JWT token
   * file_id: UUID of the file to process
   * request_data: Processing request containing process_type
   *
   * Returns:
   * FileProcessPublic: The created FileProcess record
   *
   * Raises:
   * HTTPException: 404 if file not found, 403 if unauthorized,
   * 400 if upload not complete, 500 if processing failed
   * @param data The data for the request.
   * @param data.fileId
   * @param data.requestBody
   * @returns FileProcessPublic Successful Response
   * @throws ApiError
   */
  public static startFileProcessing(
    data: FilesStartFileProcessingData,
  ): CancelablePromise<FilesStartFileProcessingResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/files/{file_id}/start-process",
      path: {
        file_id: data.fileId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get File Processes
   * Get all processing records for a specific file.
   *
   * Args:
   * session: Database session dependency
   * current_user: Authenticated user from JWT token
   * file_id: UUID of the file to get processes for
   * skip: Number of records to skip (pagination)
   * limit: Maximum number of records to return (pagination)
   *
   * Returns:
   * list[FileProcessPublic]: List of FileProcess records for the file
   *
   * Raises:
   * HTTPException: 404 if file not found, 403 if unauthorized
   * @param data The data for the request.
   * @param data.fileId
   * @param data.skip
   * @param data.limit
   * @returns FileProcessPublic Successful Response
   * @throws ApiError
   */
  public static getFileProcesses(
    data: FilesGetFileProcessesData,
  ): CancelablePromise<FilesGetFileProcessesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/files/{file_id}/processes",
      path: {
        file_id: data.fileId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get File Process
   * Get a specific processing record for a file.
   *
   * Args:
   * session: Database session dependency
   * current_user: Authenticated user from JWT token
   * file_id: UUID of the file
   * process_id: UUID of the specific process
   *
   * Returns:
   * FileProcessPublic: The requested FileProcess record
   *
   * Raises:
   * HTTPException: 404 if file/process not found, 403 if unauthorized
   * @param data The data for the request.
   * @param data.fileId
   * @param data.processId
   * @returns FileProcessPublic Successful Response
   * @throws ApiError
   */
  public static getFileProcess(
    data: FilesGetFileProcessData,
  ): CancelablePromise<FilesGetFileProcessResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/files/{file_id}/processes/{process_id}",
      path: {
        file_id: data.fileId,
        process_id: data.processId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Process Segments
   * Get all segments for a specific file process.
   *
   * Args:
   * session: Database session dependency
   * current_user: Authenticated user from JWT token
   * file_id: UUID of the file
   * process_id: UUID of the process
   * skip: Number of records to skip (pagination)
   * limit: Maximum number of records to return (pagination)
   *
   * Returns:
   * list[FileSegmentPublic]: List of FileSegment records for the process
   *
   * Raises:
   * HTTPException: 404 if file/process not found, 403 if unauthorized
   * @param data The data for the request.
   * @param data.fileId
   * @param data.processId
   * @param data.skip
   * @param data.limit
   * @returns FileSegmentPublic Successful Response
   * @throws ApiError
   */
  public static getProcessSegments(
    data: FilesGetProcessSegmentsData,
  ): CancelablePromise<FilesGetProcessSegmentsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/files/{file_id}/processes/{process_id}/segments",
      path: {
        file_id: data.fileId,
        process_id: data.processId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ItemsService {
  /**
   * Read Items
   * Retrieve items.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ItemsPublic Successful Response
   * @throws ApiError
   */
  public static readItems(
    data: ItemsReadItemsData = {},
  ): CancelablePromise<ItemsReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Item
   * Create new item.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static createItem(
    data: ItemsCreateItemData,
  ): CancelablePromise<ItemsCreateItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/items/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Item
   * Get item by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static readItem(
    data: ItemsReadItemData,
  ): CancelablePromise<ItemsReadItemResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Item
   * Update an item.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ItemPublic Successful Response
   * @throws ApiError
   */
  public static updateItem(
    data: ItemsUpdateItemData,
  ): CancelablePromise<ItemsUpdateItemResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Item
   * Delete an item.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteItem(
    data: ItemsDeleteItemData,
  ): CancelablePromise<ItemsDeleteItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: PrivateCreateUserData,
  ): CancelablePromise<PrivateCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class SseService {
  /**
   * Subscribe to Server-Sent Events for real-time updates
   * @param data The data for the request.
   * @param data.token JWT token for authentication
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static sseUpdatesEndpoint(
    data: SseSseUpdatesEndpointData = {},
  ): CancelablePromise<SseSseUpdatesEndpointResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/sse/stream",
      query: {
        token: data.token,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UploadsService {
  /**
   * Create Presigned Upload Url
   * Generates a presigned URL for uploading a file directly to MinIO
   * and creates a corresponding File record in the database.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns PresignedUrlResponse Successful Response
   * @throws ApiError
   */
  public static createPresignedUploadUrl(
    data: UploadsCreatePresignedUploadUrlData,
  ): CancelablePromise<UploadsCreatePresignedUploadUrlResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/uploads/presigned-url",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Initiate Multipart Upload Endpoint
   * Initiate a multipart upload for large files.
   * Creates a database record and returns an upload ID for subsequent part uploads.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns InitiateMultipartResponse Successful Response
   * @throws ApiError
   */
  public static initiateMultipartUploadEndpoint(
    data: UploadsInitiateMultipartUploadEndpointData,
  ): CancelablePromise<UploadsInitiateMultipartUploadEndpointResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/uploads/multipart/initiate",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Multipart Part Url
   * Generate a presigned URL for uploading a specific part of a multipart upload.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns PresignedPartUrlResponse Successful Response
   * @throws ApiError
   */
  public static getMultipartPartUrl(
    data: UploadsGetMultipartPartUrlData,
  ): CancelablePromise<UploadsGetMultipartPartUrlResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/uploads/multipart/part-url",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Complete Multipart Upload Endpoint
   * Complete a multipart upload by combining all uploaded parts.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns CompleteMultipartResponse Successful Response
   * @throws ApiError
   */
  public static completeMultipartUploadEndpoint(
    data: UploadsCompleteMultipartUploadEndpointData,
  ): CancelablePromise<UploadsCompleteMultipartUploadEndpointResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/uploads/multipart/complete",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Abort Multipart Upload Endpoint
   * Abort a multipart upload and clean up resources.
   * @param data The data for the request.
   * @param data.fileId
   * @param data.uploadId
   * @returns string Successful Response
   * @throws ApiError
   */
  public static abortMultipartUploadEndpoint(
    data: UploadsAbortMultipartUploadEndpointData,
  ): CancelablePromise<UploadsAbortMultipartUploadEndpointResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/uploads/multipart/abort",
      query: {
        file_id: data.fileId,
        upload_id: data.uploadId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Debug Upload Configuration
   * Debug endpoint to check MinIO configuration.
   * Remove this in production!
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static debugUploadConfiguration(): CancelablePromise<UploadsDebugUploadConfigurationResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/uploads/debug-config",
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }

  /**
   * Get Sse Url
   * Provides the full SSE URL for client connections.
   * @returns SSEUrlResponse Successful Response
   * @throws ApiError
   */
  public static getSseUrl(): CancelablePromise<UtilsGetSseUrlResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/sse-url/",
    })
  }
}
