FROM python:3.12-slim

# Set working directory
WORKDIR /app

# Install system dependencies
# build-essential for compiling any Python packages that need it
# ffmpeg for media processing
# curl might be useful for diagnostics or downloading other resources if needed
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    ffmpeg \
    curl && \
    rm -rf /var/lib/apt/lists/*

# Install uv
# Ref: https://docs.astral.sh/uv/guides/integration/docker/#installing-uv
COPY --from=ghcr.io/astral-sh/uv:0.5.11 /uv /uvx /bin/

# Place executables in the environment at the front of the path
# Ref: https://docs.astral.sh/uv/guides/integration/docker/#using-the-environment
ENV PATH="/app/.venv/bin:$PATH"

# Compile bytecode
# Ref: https://docs.astral.sh/uv/guides/integration/docker/#compiling-bytecode
ENV UV_COMPILE_BYTECODE=1

# uv Cache
# Ref: https://docs.astral.sh/uv/guides/integration/docker/#caching
ENV UV_LINK_MODE=copy

# Copy project definition files first for better layer caching
# These paths are relative to the build context (which is 'backend/')
COPY pyproject.toml /app/pyproject.toml
COPY uv.lock* /app/

# Install dependencies using uv (excluding the project itself initially for better caching)
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-install-project

# Copy all application source code from the host's 'backend/' directory
# into the image's '/app/' directory.
# This makes 'app' the top-level package inside the image at /app/.
COPY ./ /app/

# Sync the project itself (installs the 'app' package as defined in /app/pyproject.toml
# and any remaining dependencies). uv will find the 'app' sources in /app/app/.
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --locked

# ENTRYPOINT allows for easy command overriding in docker-compose
ENTRYPOINT ["bash", "-c"]
