FROM python:3.12-slim

# Set working directory
WORKDIR /app

# Install system dependencies
# build-essential for compiling any Python packages that need it
# ffmpeg for media processing
# curl might be useful for diagnostics or downloading other resources if needed
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    ffmpeg \
    curl && \
    rm -rf /var/lib/apt/lists/*

# Install uv
# Ref: https://docs.astral.sh/uv/guides/integration/docker/#installing-uv
COPY --from=ghcr.io/astral-sh/uv:0.5.11 /uv /uvx /bin/

# Place executables in the environment at the front of the path
# Ref: https://docs.astral.sh/uv/guides/integration/docker/#using-the-environment
ENV PATH="/app/.venv/bin:$PATH"

# Compile bytecode
# Ref: https://docs.astral.sh/uv/guides/integration/docker/#compiling-bytecode
ENV UV_COMPILE_BYTECODE=1

# uv Cache
# Ref: https://docs.astral.sh/uv/guides/integration/docker/#caching
ENV UV_LINK_MODE=copy

# Install dependencies using uv
# Ref: https://docs.astral.sh/uv/guides/integration/docker/#intermediate-layers
# Copy only project definition files first for better layer caching
COPY pyproject.toml uv.lock /app/
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-install-project

# Copy the rest of the backend application code
COPY . /app

# Set PYTHONPATH to ensure the 'app' module is discoverable
ENV PYTHONPATH=/app

# Sync the project itself (installs the 'app' package and any remaining dependencies)
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync

# Command to run the Celery worker
CMD ["celery", "-A", "app.tasks", "worker", "-Q", "transcription_cpu", "-l", "info"]
