# Base image with CUDA support
FROM nvidia/cuda:12.1.1-devel-ubuntu22.04

# Set environment variables to ensure correct encoding and non-interactive frontend for apt
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8
ENV DEBIAN_FRONTEND=noninteractive

# Install Python 3.12, pip (for uv bootstrap if needed, though uv installs its own Python tools), ffmpeg, build-essential
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.12 \
    python3-pip \
    python3.12-venv \
    ffmpeg \
    build-essential \
    curl \
    # Clean up apt caches
    && rm -rf /var/lib/apt/lists/*

# Make python3.12 the default python3 and pip3
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 1 && \
    update-alternatives --install /usr/bin/pip3 pip3 /usr/bin/pip3 1

# Verify python version
RUN python3 --version
RUN pip3 --version

WORKDIR /app

# Install uv
COPY --from=ghcr.io/astral-sh/uv:0.5.11 /uv /uvx /bin/

ENV PATH="/app/.venv/bin:$PATH"
ENV UV_COMPILE_BYTECODE=1
ENV UV_LINK_MODE=copy

# Copy project definition files
COPY pyproject.toml /app/pyproject.toml
COPY uv.lock* /app/

# Install dependencies using uv (excluding project)
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-install-project

# Copy all application code from the host's 'app' directory
# into the image's '/app/' directory.
COPY ./ /app/

# Add /app to PYTHONPATH
ENV PYTHONPATH "${PYTHONPATH}:/app"

# Sync the project itself
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --locked

# ENTRYPOINT allows for easy command overriding in docker-compose
ENTRYPOINT ["bash", "-c"]
